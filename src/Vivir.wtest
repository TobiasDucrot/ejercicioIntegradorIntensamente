import Emociones.*
import Riley.*

describe "Vivir" {
	//Emociones
	const enojo = new Emocion()
	const disgusto = new Emocion()
	const temor = new Emocion()
	//EmocionesCompuestas
	//([emociones])
	const alegriaTristeza = new EmocionCompuesta([alegria,tristeza])
	const enojoDisgusto = new EmocionCompuesta([enojo,disgusto])
	const alegriaTemor = new EmocionCompuesta([alegria,temor])
	//Recuerdos
	//(_fecha,_descripcion,_emocionDominante,_asentamiento) 
	// var fecha = new Date(28,01,2001) Date[2001-01-28]
	//Diarios
	const recuerdoAlegre = new Recuerdo("Si! Tengo mi unicornio",new Date(),alegria)
	const recuerdoAlegre2 = new Recuerdo("",new Date(), alegria)
	const recuerdoTriste = new Recuerdo("",new Date(), tristeza)
	const recuerdoTriste2 = new Recuerdo("",new Date(), tristeza)
	const recuerdoEnojado = new Recuerdo("",new Date(), enojo)
	const recuerdoTemeroso = new Recuerdo("Tengo miedo mami",new Date(),temor)
	const recuerdoDisgustado = new Recuerdo("",new Date(),disgusto)
	const recuerdoAlegriaTemor = new Recuerdo ("",new Date(),alegriaTemor)
	const recuerdoAlegriaTristeza = new Recuerdo("", new Date(),alegriaTristeza)
	//Asentados
	const recuerdoAlegre3 = new Recuerdo("Me gustan mucho los unicornios de color blanco y rosa pastel",new Date(21,09,2008),alegria)
	const recuerdoTriste3  = new Recuerdo("",new Date(),tristeza)
	const recuerdoEnojado2  = new Recuerdo("¿POR QUE NO PUEDO TENER ESE PELUCHE DE UNICORNIO QUE TANTO QUIERO?",new Date(),enojo)
	const recuerdoTemeroso2  = new Recuerdo("",new Date(),temor)
	const recuerdoDisgustado2  = new Recuerdo("",new Date(30,10,2009),disgusto)
	const recuerdoAlegriaTemor2  = new Recuerdo ("",new Date(),alegriaTemor)
	const recuerdoAlegriaTristeza2 = new Recuerdo("",new Date(),alegriaTristeza)
	//Personas
	//(_felicidad,_dominante,_recuerdosDelDia,_pensamientosCentrales,_largoPlazo,_fechaNacimiento)
	const riley = new Persona(1000,alegria,[recuerdoAlegre,recuerdoTriste,recuerdoTemeroso],[recuerdoAlegre3,recuerdoTriste3],[],new Date(21,09,2005))
	const lara = new Persona(750,enojo,[],[],[],new Date(03,02,2005))
	const monica = new Persona(400,disgusto,[],[],[],new Date(07,06,2005))
	const sadAffleck = new Persona(1,tristeza,[recuerdoAlegre,recuerdoTriste,recuerdoTemeroso],[],[],new Date(04,06,2005))
	const lisa = new Persona(1000,temor,[],[],[],new Date(19,06,2005))
	const mona = new Persona (100,alegriaTristeza, [],[],[], new Date(28,01,2005))
	const mica = new Persona(650,enojo,[],[],[recuerdoAlegre3,recuerdoDisgustado2],new Date(05,01,2005))

test "Riley vive un evento enojado(o cualquier tipo) y este se agrega a los recuerdos del dia(ahora tiene 4 recuerdos)" {
riley.vivirEvento(recuerdoEnojado)
assert.that(riley.recuerdosDelDia().size()== 4)
}
test "Riley(felicidad 1000) asienta un recuerdo alegre, este se convierte en pensamiento central"{
riley.asentar(recuerdoAlegre2)
assert.that(riley.tienePensamientoCentral(recuerdoAlegre2))
}
test "Monica(felicidad 400) asienta un recuerdo alegre, este no se convierte en pensamiento central"{
	monica.asentar(recuerdoAlegre2)
	assert.notThat(monica.tienePensamientoCentral(recuerdoAlegre2))
}
test "SadAffleck(felicidad 1) asienta un recuerdo triste, y este lanza una excepcion "{
	
	assert.throwsExceptionWithMessage("La persona no puede soportar la tristeza",({sadAffleck.asentar(recuerdoTriste2)}))
}
test "Riley asienta un recuerdo triste y le quita el 10% de la felicidad (900)"{
	riley.asentar(recuerdoTriste)
	assert.equals(900,riley.felicidad())
}
test "Riley asienta un recuerdo disgustado, y no ocurre nada"{
	// No hace falta probar con enojado y temeroso ya queson objecos de  la misma clase
	riley.asentar(recuerdoDisgustado)
	assert.notThat(riley.tienePensamientoCentral(recuerdoDisgustado))
}
test "Riley asienta un recuerdo del tipo AlegriaTemor, este se convierte en pensamiento central"{
	riley.asentar(recuerdoAlegriaTemor)
	assert.that(riley.tienePensamientoCentral(recuerdoAlegriaTemor))
}
test "Monica asienta un recuerdo del tipo AlegriaTristeza y le quita el 10% de la felicidad(360)"{
	monica.asentar(recuerdoAlegriaTristeza)
	assert.equals(360,monica.felicidad())
}
test "El  pensamiento central de alegria(recuerdoalegre) Riley es dificil de entender(Poseen mas de 10 palabras)"{

	assert.equals([recuerdoAlegre3],riley.centralesDificiles())
}

// Descansar

test " Riley (dominante alegria) niega todo lo que no sea feliz" {
	assert.that(riley.niega(recuerdoTriste))
	assert.that(riley.niega(recuerdoDisgustado))
	assert.that(riley.niega(recuerdoEnojado))
	assert.that(riley.niega(recuerdoAlegriaTristeza))
	assert.notThat(riley.niega(recuerdoAlegre))
}

test "Riley asienta los recuerdos del dia:
	el recuerdo alegre se convierte en pensamiento central
	el triste le quita el 10% de la felicidad
	el temeroso no hace nada"{
	riley.agregarProcesoMental(asentamiento)
	riley.dormir()
	assert.that(riley.tienePensamientoCentral(recuerdoAlegre))
	assert.equals(900,riley.felicidad())
	}
test "Riley asienta selectivamente todos los pensamientos relacionados con la palabra unicornio"{
	riley.agregarProcesoMental(new AsentamientoSelectivo("unicornio"))
	riley.dormir()
	assert.that(riley.tienePensamientoCentral(recuerdoAlegre))
}
test "SadAffleck profundiza(dominante tristeza,recuerdo Alegre, recuerdo Triste, recuerdo Temeroso) solo el recuerdo temeroso"{
	sadAffleck.agregarProcesoMental(profundizacion)
	sadAffleck.dormir()
	assert.that(sadAffleck.tieneLargoPlazo(recuerdoTemeroso))
}
test "Riley profundiza el recuerdo alegre(dominante alegria,recuerdo Alegre, recuerdo Triste, recuerdo Temeroso)"{
	riley.agregarProcesoMental(profundizacion)
	riley.dormir()
	assert.that(riley.tieneLargoPlazo(recuerdoAlegre))
}

test "La restauracion Cognitiva hace que Riley quede en 1000 de felicidad"{

	riley.agregarProcesoMental(restauracionCognitiva)
	riley.dormir()
	assert.equals(1000,riley.felicidad())
}
test "La restauracion Cognitiva hace que sadAffleck tenga 101 de felicidad"{
	sadAffleck.agregarProcesoMental(restauracionCognitiva)
	sadAffleck.dormir()
	assert.equals(101,sadAffleck.felicidad())
}

test "Los recuerdos del dia de riley son liberados y la lista queda vacia"{
	riley.agregarProcesoMental(liberacionDeRecuerdos)
	riley.dormir()
	assert.that(riley.recuerdosDelDia().isEmpty())
}
// Rememorar
test "Mica tiene un dejavu con el recuerdo alegre ya asentado" {
 	mica.pensamientoActual(recuerdoAlegre3)
 	assert.that(mica.dejaVu())
}
test "Mica rememora algo"{
	mica.rememorar()
	assert.equals(recuerdoAlegre3, mica.pensamientoActual())
}


}